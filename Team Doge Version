; ------------------------------------------------------------
; CMPR 154 - Spring 2024
; Team Name: Team Doge
; Team Members: Josiah Liao, Ashutosh Bharadwaj, David Calderon, Michael Merrick
; Creation Date: 13 May 2024
; Collaboration: None so far
; ----------------------------------------------------------
INCLUDE Irvine32.inc

.data
; main menu strings
chooseName byte "  _____   ____   _____ ______    _____                     _                _____   ", 13, 10
           byte " |  __ \ / __ \ / ____|  ____|  / ____|                   (_)              / ____|                     _ ", 13, 10
           byte " | |  | | |  | | |  __| |__    | |  __ _   _  ___  ___ ___ _ _ __   __ _  | |  __  __ _ _ __ ___   ___(_)", 13, 10
           byte " | |  | | |  | | | |_ |  __|   | | |_ | | | |/ _ \/ __/ __| | '_ \ / _` | | | |_ |/ _` | '_ ` _ \ / _ \  ", 13, 10
           byte " | |__| | |__| | |__| | |____  | |__| | |_| |  __/\__ \__ \ | | | | (_| | | |__| | (_| | | | | | |  __/_ ", 13, 10
           byte " |_____/ \____/ \_____|______|  \_____|\__,_|\___||___/___/_|_| |_|\__, |  \_____|\__,_|_| |_| |_|\___(_)", 13, 10
           byte "                                                                    __/ |                                ", 13, 10
           byte "                                                                   |___/                                 ", 13, 10
byte "Welcome!", 13,10  
byte "Please enter your name: ", 0
selection byte "Please select one of the following:", 0
choice1 byte "1: Display my available credit", 0
choice2 byte "2: Make a purchase", 0
choice3 byte "3: Play regular version of the guessing game", 0
choice4 byte "4: Play Team Doge version of the guessing game", 0
choice5 byte "5: Display my statistics", 0
choice6 byte "6: Play impossible game", 0
choice7 byte "7: Exit game", 0
errorMsg byte "Invalid input, please try again.", 0

; choice 1 strings
creditMsg byte "Your available credit balance: ", 0
; choice 2 strings
buyPremium byte "Press 'p' to purchase premium subscription ($10).", 0
donate byte "Press 'd' to donate to Team Doge nonprofit organization. Every dollar helps!", 0
buyCredits byte "Press 'c' to purchase additional credits.", 0
; purchase strings
amountIfDonate byte "How much would you like to donate? ", 0
amountIfCredits byte "How many credits would you like to purchase ($20 or less)? ", 0
purchaseFailed byte "That is an invalid number of credits. Please try again.", 0
purchaseMsg byte "Please enter your details below:", 0
creditCard byte "Credit Card Number: ", 0
cvcSecCode byte "CVC Security Code (on the back of the card): ", 0
SSN byte "Social Security Number: ", 0
address byte "Billing Address: ", 0
pin byte "Please enter your PIN: ", 0
purchaseExit byte "Thank you for your purchase. You will now be redirected to the main screen.", 0
; choice 3 strings
noCredits byte "Not enough credits. Please buy more before playing.", 0
; RULES are for losers
  rules byte "RULES:", 13, 10, 13, 10
         byte "If you guess the correct number,", 13, 10
         byte "you will earn $2.00. If you guess", 13, 10
         byte "incorrectly, you will not earn any money.", 13, 10, 13, 10, 0
tryGuess byte "Guess a number from 1-10. Good luck! Your guess: ", 0
goodGuess byte "Nice job! You guessed correctly!", 0
oneGuess byte "You were one off the correct answer. You will still gain money, but the correct answer was ", 0
badGuess byte "Too bad. You guessed incorrectly. The correct answer was ", 0
ifLoop byte "Press 1 to play again, press anything else to move to the home screen: ", 0
; choice 4 strings
rulesDoge byte "RULES:", 13, 10, 13, 10
         byte "If you guess the correct number,", 13, 10
         byte "you will earn $6.00. If you guess", 13, 10
         byte "a number adjacent to the correct", 13, 10
         byte "number, you will earn $2.00. If you guess", 13, 10  
         byte "incorrectly, you will not earn any money.", 13, 10, 13, 10, 0
; choice 5 strings
displayName byte "Name: ", 0
displayGames byte "Games played: ", 0
displayCorrect byte "Your correct guesses (regular verison): ", 0
displayWrong byte "Your incorrect guesses (regular version): ", 0
displayGood byte "Your correct guesses (Doge version): ", 0
displayClose byte "Your close guesses (Doge version): ", 0
displayBad byte "Your incorrect guesses (Doge version): ", 0
displayImp byte "Your incorrect guesses (impossible version): ", 0
displayGain byte "Money gained: $", 0
displayLoss byte "Money lost: $", 0
; choice 6 strings
rulesImp byte "RULES:", 13, 10, 13, 10
           byte "The game is impossible. That's it. Good luck!", 0
; choice 7 strings
exitMsg byte "Goodbye! Thanks for playing!", 0
; variables
maxLength equ 80
credits dword 0
MAX_ALLOWED word equ 20
amount word 0
correctGuesses dword 0
missedGuesses dword 0
correctGuessesDoge dword 0
missedGuessesDoge dword 0
oneGuessesDoge dword 0
guessImp dword 0
username byte maxLength+1 dup(?)
isPremiumUser byte 0
choice dword 0
random dword 0
; ad messages

.code

main proc

; Get name
mov edx, offset chooseName
call writestring
mov edx, offset username
mov ecx, maxLength
call readstring

; Home screen
home:
  call clrscr
  mov edx, offset selection
  call writestring
  call crlf
  mov edx, offset choice1
  call writestring
  call crlf
  mov edx, offset choice2
  call writestring
  call crlf
  mov edx, offset choice3
  call writestring
  call crlf
  mov edx, offset choice4
  call writestring
  call crlf
  mov edx, offset choice5
  call writestring
  call crlf
  mov edx, offset choice6
  call writestring
  call crlf
  mov edx, offset choice7
  call writestring
  call crlf
readChoice:
  call readint
  mov choice, eax
  jo badChoice  

; Switch statement
  cmp choice, 1
  je one
  cmp choice, 2
  je two
  cmp choice, 3
  je three
  cmp choice, 4
  je four
  cmp choice, 5
  je five
  cmp choice, 6
  je six
  cmp choice, 7
  je seven

; Error message
badChoice:
  mov edx, offset errorMsg
  call writestring
  call crlf
  call waitmsg
  jmp home

; Choice 1
one:
  call clrscr
  mov edx, offset creditMsg
  call writestring
  mov eax, credits
  call writedec
  call crlf
  call waitmsg
  jmp home

; Choice 2
two:
  call clrscr
; choose purchase
mov edx, offset buyCredits
call writestring
call crlf
mov edx, offset donate
call writestring
call crlf
cmp isPremiumUser, 1
je noPremium
mov edx, offset buyPremium
call writestring
call crlf
noPremium:
call readchar
mov choice, al
cmp choice, "c"
je credits
cmp choice, "d"
je donate
cmp isPremiumUser,1
je badPurchase
cmp choice, "p"
je premium
badPurchase:
mov edx, offset errorMsg
call writestring
call crlf
call waitmsg
jmp two

credits:
  mov edx, offset amountIfCredits
  call writestring
  call readint
  mov choice, eax
  cmp choice, 20
  jng goodCredits
  mov edx, offset purchaseFailed
  call writestring
  mov eax, 2000
  call delay
  jmp two
  goodCredits:
mov eax, "c"
push eax
jmp billing
addCredits:
    add credits, eax
    call clrscr
    mov edx, offset purchaseExit
    call writestring
    call crlf
    mov eax, 2000
    call delay
  jmp home

donate:
mov edx, offset amountIfDonate
call writestring
call readdec
mov eax, "d"
push eax
jmp billing
finishDonate:
call clrscr
mov edx, offset purchaseExit
call writestring
call crlf
mov eax, 2000
call delay
jmp home

premium:
mov eax, "p"
push eax
jmp billing
finishPremium:
mov isPremiumUser, 1
call clrscr
mov edx, offset purchaseExit
call writestring
call crlf
mov eax, 2000
call delay
jmp home

billing:
call clrscr
mov edx, offset purchaseMsg
call writestring
call crlf
mov edx, offset creditCard
call writestring
call readstring
mov edx, offset cvcSecCode
call writestring
call readstring
mov edx, offset SSN
call writestring
call readstring
mov edx, offset address
call writestring
call readstring
mov edx, offset pin
call writestring
call readstring
pop eax
cmp eax, "c"
je addCredits
cmp eax, "d"
je finishDonate
cmp eax, "p"
je finishPremium

; Choice 3
three:
  call clrscr
cmp credits, 0
jne play
mov edx, offset noCredits
call writestring
mov eax, 2000
call delay
jmp home
play:
  ; make the game yay
  ; rules yay
  mov eax, correctGuesses
  add eax, missedGuesses
  cmp eax, 0
  jne norules
  ; show rules
mov edx, offset rules
 call writestring
  call waitmsg
  call clrscr
  norules:
  ; random number
  dec credits
  mov eax, 10
  call randomrange
  inc eax
  mov random, eax
  ; user choice
  ; guessing message
  mov edx, offset tryGuess
  call writestring
  call readint
  mov choice, eax
  ; conditional
  cmp eax, random
  jne incorrect
  ; good job message
  mov edx, offset goodGuess
  call writestring
  inc correctGuesses
  add credits, 2
  call crlf
  call waitmsg
  jmp home
  incorrect:
  ; bad job message
  mov edx, offset badGuess
  call writestring
  mov eax, random
  call writedec
  call crlf
  inc missedGuesses
  ; loop game
mov edx, offset ifLoop
call writestring
call readchar
mov choice, al
cmp choice, "1"
je three
  jmp home

; Choice 4
four:
  call clrscr
cmp credits, 0
jne play
mov edx, offset noCredits
call writestring
mov eax, 2000
call delay
jmp home
play:
  ; make the game yay   
  ; rules yay (this has to be redone for this version)
  mov eax, correctGuessesDoge
  add eax, missedGuessesDoge
  cmp eax, 0
  jne norules
  ; show rules
mov edx, offset rulesDoge
 call writestring
  call waitmsg
  call clrscr

  norules:
  ; random number
  dec credits
  mov eax, 10
  call randomrange
  inc eax
  mov random, eax
  ; user choice
  ; guessing message
  mov edx, offset tryGuess
  call writestring
  call readint
  mov choice, eax
  ; conditional
  sub eax, random
  cmp eax, 1
  je oneaway
cmp eax, -1
je oneaway
mov choice, eax
cmp eax, random
  jne incorrect
  ; good job message
  mov edx, offset goodGuess
  call writestring
  inc correctGuessesDoge
  add credits, 6
  call crlf
  jmp loop
  incorrect:
  ; bad job message
  mov edx, offset badGuess
  call writestring
  mov eax, random
  call writedec
  call crlf
  inc missedGuessesDoge
jmp loop
oneAway:
mov edx, offset oneGuess
call writestring
mov eax, random
call writedec
inc oneGuessesDoge
add credits, 2
call crlf

  ; loop game
loop:
mov edx, offset ifLoop
call writestring
call readchar
mov choice, al
cmp choice, "1"
je four
  jmp home

; Choice 5
five:
  call clrscr 
  ; display stats
  mov edx, offset displayName
  call writestring
  mov edx, offset username
  call writestring
  call crlf
  mov edx, offset creditMsg
  call writestring
  mov eax, credits
  call writedec
  call crlf
  mov edx, offset displayGames
  call writestring
  mov eax, correctGuesses
  add eax, missedGuesses
  call writedec
  call crlf
  mov edx, offset displayCorrect
  call writestring
  mov eax, correctGuesses
  call writedec
  call crlf
  mov edx, offset displayWrong
  call writestring
  mov eax, missedGuesses
  call writedec
  call crlf
mov edx, offset displayGood
call writestring
mov eax, correctGuessesDoge
call writedec
call crlf
mov edx, offset displayClose
call writestring
mov eax, oneGuessesDoge
call writedec
call crlf
mov edx, offset displayBad
call writestring
mov eax, missedGuessesDoge
call writedec
call crlf
mov edx, offset displayImp
call writestring
mov eax, guessImp
call writedec
call crlf
  mov edx, offset displayGain
  call writestring
  mov eax, correctGuesses
mov ebx, correctGuessesDoge
mul ebx, 5
add eax, ebx
mov eax, oneGuessesDoge
  call writedec
  call crlf
  mov edx, offset displayLoss
  call writestring
  mov eax, missedGuesses
add eax, missedGuessesDoge
  call writedec
  call crlf  
  call waitmsg
  jmp home

; Choice 6
six:
call clrscr
cmp credits, 0
jne play
mov edx, offset noCredits
call writestring
mov eax, 2000
call delay
jmp home
play:
  ; make the game yay
  ; rules yay
  mov eax, correctGuesses
  add eax, missedGuesses
  cmp eax, 0
  jne norules
  ; show rules
mov edx, offset rulesImp
 call writestring
  call waitmsg
  call clrscr
  norules:
  ; random number
  dec credits
  ; user choice
  ; guessing message
  mov edx, offset tryGuess
  call writestring
  call readint
  mov choice, eax
  ; bad job message
  mov edx, offset badGuess
  call writestring
  mov eax, choice
cmp choice, 10
je sub
inc eax
jmp print
sub:
dec eax
print:
  call writedec
  call crlf
  inc guessImp
  ; loop game
mov edx, offset ifLoop
call writestring
call readchar
mov choice, al
cmp choice, "1"
je six
  jmp home

; Choice 7
seven:
  call clrscr
  ; exit game
  mov edx, offset exitMsg
  call writestring
  call crlf

exit
main endp
end main
